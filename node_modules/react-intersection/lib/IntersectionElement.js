"use strict";

exports.__esModule = true;
exports["default"] = void 0;

var React = _interopRequireWildcard(require("react"));

var _intersectionObserver = _interopRequireDefault(require("./intersection-observer"));

var _intersectionRootContext = require("./intersection-root-context");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var defaultObserver;

var getDefaultObserver = function getDefaultObserver() {
  if (!defaultObserver) {
    defaultObserver = new _intersectionObserver["default"]({});
  }

  return defaultObserver;
};

var IntersectionElement =
/*#__PURE__*/
function (_React$Component) {
  _inheritsLoose(IntersectionElement, _React$Component);

  function IntersectionElement() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;

    _defineProperty(_assertThisInitialized(_this), "node", void 0);

    _defineProperty(_assertThisInitialized(_this), "observe", void 0);

    _defineProperty(_assertThisInitialized(_this), "unobserve", void 0);

    return _this;
  }

  var _proto = IntersectionElement.prototype;

  _proto.componentDidMount = function componentDidMount() {
    var _this2 = this;

    var _this$context = this.context,
        observe = _this$context.observe,
        unobserve = _this$context.unobserve;

    if (this.node && this.node instanceof HTMLElement) {
      this.observe = observe || getDefaultObserver().observe;
      this.unobserve = unobserve || getDefaultObserver().unobserve;
      this.observe(this.node, function (entry) {
        var _this2$props = _this2.props,
            onChange = _this2$props.onChange,
            once = _this2$props.once;
        onChange(entry);

        if (_this2.node && once && entry.isIntersecting) {
          _this2.unobserve(_this2.node);

          delete _this2.node;
        }
      });
    }
  };

  _proto.componentWillUnmount = function componentWillUnmount() {
    if (this.node) {
      this.unobserve(this.node);
      delete this.node;
    }
  };

  _proto.render = function render() {
    var _this3 = this;

    return React.Children.only(React.cloneElement(this.props.children, {
      ref: function ref(node) {
        _this3.node = node;
        var ref = _this3.props.children.ref;

        if (typeof ref === 'function') {
          ref(node);
        } else if (ref !== null) {
          ref.current = node;
        }
      }
    }));
  };

  return IntersectionElement;
}(React.Component);

exports["default"] = IntersectionElement;

_defineProperty(IntersectionElement, "contextType", _intersectionRootContext.IntersectionRootContext);